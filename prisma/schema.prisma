generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Service {
  id            Int     @id @default(autoincrement())
  name          String
  description   String?
  repeatdeEvery Int     @default(0)

  clientServices ClientService[]
  clients Client[]
  Email   Email[]
  File    File[]

  @@map("services")
}

model Branch {
  id       Int     @id @default(autoincrement())
  name     String
  location String?

  managerId Int?      @unique
  manger    Employee? @relation("branch_manager", fields: [managerId], references: [id])

  employees Employee[]

  teams Team[]

  clients Client[]

  @@map("branches")
}

model Acccount {
  id              Int            @id @default(autoincrement())
  email           String         @unique @map("userNameOrEmail")
  hashedPassword  String
  status          ACCOUNT_STATUS @default(active)
  isOnline        Boolean        @default(false)
  lastLoginAt     DateTime?
  logoutAt        DateTime?
  profileImageUrl String?

  admin    Admin?
  employee Employee?
  client   Client?

  sendedEmails   Email[]        @relation("user_sended_emails")
  receivedEmails Email[]        @relation("user_received_emails")
  uploadedFiles  File[]
  notifications  Notification[]

  @@map("accounts")
}

model Admin {
  id              Int
  name            String
  profileImageUrl String?
  account         Acccount @relation(fields: [id], references: [id])

  @@id([id])
  @@map("admins")
}

model Employee {
  id      Int
  account Acccount @relation(fields: [id], references: [id])

  // personal details
  personalNumber String?
  salutation     String?
  title          String?
  firstName      String?
  lastName       String? // 3 inputs
  street         String?
  houseNumber    String?   @map("housNumber")
  city           String?
  postalCode     String?   @map("zipCode")
  country        String?
  phone          String?
  gender         GENDER?
  birthDate      DateTime?
  nationality    String?
  username       String?
  maritalStatus  String

  // occupation
  entryDate          DateTime?
  groupOfPeople      String?
  jobTitle           String?
  jobCode            String?   @map("activationCode")
  graduation         String?
  vocationalTraining String?
  AUG                String?
  contractForm       String?
  employmentStatus   String?
  multipleEmployment String?
  weeklyWorkHours    Int?
  dailyWorkHours     Int?

  // taxes
  typeOfEmployment        String?
  taxIdentificationNumber String? @map("identificationNumber")

  // social insurance
  healthOrLongTermInsurance String?
  healthInsurance           String?
  parenthoodInPrimary       String?
  pensionInsurance          String?
  unemploymentInsurance     String?
  socialSecurityNumber      String?

  // fee
  typeOfPayment String?
  hourWage      Float?
  IBAN          String?
  BIC           String?

  extraInfo                     String? @db.Text
  approvalForInclusionInPayroll Boolean @default(false)

  roleId   Int
  branchId Int
  teamId   Int?

  workingPapers File[]

  leadingTeam   Team?                 @relation("team_leader")
  role          EmployeeRole          @relation(fields: [roleId], references: [id])
  branch        Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade)
  managedBranch Branch?               @relation("branch_manager")
  team          Team?                 @relation("team_members", fields: [teamId], references: [id])
  dailyReports  EmployeeDailyReport[]

  clientServices ClientService[]

  @@id([id])
}

model EmployeeRole {
  id         Int    @id @default(autoincrement())
  name       String @unique
  priviliges Json   @default("{}")

  employees Employee[]
}

model Team {
  id   Int     @id @default(autoincrement())
  name String?

  teamLeader   Employee? @relation("team_leader", fields: [teamLeaderId], references: [id])
  teamLeaderId Int?      @unique

  employees Employee[] @relation("team_members")

  clients Client[]

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  @@map("teams")
}

model Client {
  id      Int
  account Acccount @relation(fields: [id], references: [id])

  salutation   String? @map("anrede")
  title        String?
  username     String? @map("benutzername")
  name         String?
  companyName  String? @map("vomame")
  abbreviation String? @map("shortName")
  comment      String? @map("bemerkung")

  address1       String? @map("strasseHausnrZusatz")
  address2       String? @map("adresserganzung")
  zipCodeAndCity String? @map("postleitzahlOrt")
  countryCode    String? @map("landLaenderkuerzel")
  addressComment String?

  phoneLandline String? @map("telefonFestnetz")
  phoneMobile   String? @map("telefonMobil")
  fax           String?

  gender                     String?
  maidenName                 String?
  dateOfBirth                DateTime?
  placeOfBirth               String?
  placeOfDeath               String?
  dateOfDeath                DateTime?
  religion                   String?
  federalState               String?
  maritalStatus              String?
  since                      DateTime?
  maritalPropertyRegime      String?
  unlimitedTaxLiability      Boolean?
  taxation                   String?
  taxIdentificationNumber    String?
  profession                 String?
  employer                   String?
  socialSecurityNumber       String?
  socialSecurityOrganization String?

  IBAN               String? @map("iban")
  bankCustomerNumber String?
  bankCode           String?

  taxNumber            String?
  elsterTaxNumber      String?
  deliveryAuthority    String?
  validFrom            DateTime?
  validUntil           DateTime?
  taxNumberComment     String?
  officialNumberName   String?
  taxOfficeDesignation String?
  taxOfficeComment     String?

  branchId Int
  teamId   Int?

  branch Branch @relation(fields: [branchId], references: [id])

  employeeDailyReports EmployeeDailyReport[]

  team Team? @relation(fields: [teamId], references: [id])

  clientServices ClientService[]

  files    File[]
  invoices Invoice[]
  services Service[]

  @@id([id])
  @@map("clients")
}

model ClientService {
  id     Int  @id @default(autoincrement())
  months Json @default("[]")

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees   Employee[]

  employeeDailyReports EmployeeDailyReport[]

  @@map("clients_services")
}

model EmployeeDailyReport {
  id      Int      @id @default(autoincrement())
  sign    String
  date    DateTime
  start   String
  pause   String
  end     String
  remarks String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  clientService   ClientService? @relation(fields: [clientServiceId], references: [id])
  clientServiceId Int?

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  createdAt DateTime @default(now())

  @@map("employees_daily_reports")
}

model Email {
  id        Int      @id @default(autoincrement())
  subject   String
  content   String?
  createdAt DateTime @default(now())

  sender   Acccount @relation("user_sended_emails", fields: [senderId], references: [id])
  senderId Int

  receivers Acccount[] @relation("user_received_emails")

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  files File[]

  parentEmail   Email? @relation("reply_to_email", fields: [parentEmailId], references: [id])
  parentEmailId Int?   @unique

  childEmail Email? @relation("reply_to_email")

  @@map("emails")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentFolder   Folder? @relation("child_folders", fields: [parentFolderId], references: [id])
  parentFolderId Int?

  folders Folder[] @relation("child_folders")

  files File[]

  @@map("folders")
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Acccount? @relation(fields: [userId], references: [id])
  userId Int?

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId Int?

  email   Email? @relation(fields: [emailId], references: [id])
  emailId Int?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?

  @@map("files")
}

model Notification {
  id      Int     @id @default(autoincrement())
  title   String
  content String?

  usre   Acccount @relation(fields: [userId], references: [id])
  userId Int

  @@map("notifications")
}

model ContactUsMessages {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  email       String
  title       String
  description String
  isReaded    Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("contact_us_messages")
}

model Invoice {
  id    Int   @id @default(autoincrement())
  price Float
  taxes Float

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
}

// enums
enum ACCOUNT_STATUS {
  active
  archive
}

enum GENDER {
  male
  female
}
