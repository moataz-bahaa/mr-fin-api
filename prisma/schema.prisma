generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  clients ClientService[]

  @@map("services")
}

model Branch {
  id       Int     @id @default(autoincrement())
  name     String
  location String?

  managerId Int?      @unique
  manger    Employee? @relation("branch_manager", fields: [managerId], references: [id])

  employees Employee[]

  teams Team[]

  clients Client[]

  @@map("branches")
}

model Acccount {
  id              Int            @id @default(autoincrement())
  userNameOrEmail String         @unique
  hashedPassword  String
  status          ACCOUNT_STATUS @default(active)
  isOnline        Boolean        @default(false)
  lastLoginAt     DateTime?
  logoutAt        DateTime?

  admin    Admin?
  employee Employee?
  client   Client?

  sendedEmails   Email[]        @relation("user_sended_emails")
  receivedEmails Email[]        @relation("user_received_emails")
  uploadedFiles  File[]
  notifications  Notification[]

  @@map("accounts")
}

model Admin {
  id              Int
  name            String
  profileImageUrl String?
  account         Acccount @relation(fields: [id], references: [id])

  @@id([id])
  @@map("admins")
}

model Employee {
  id      Int
  account Acccount @relation(fields: [id], references: [id])

  // personal details
  personalNumber      String?
  title               String?
  firstName           String?
  lastName            String?
  streetOrHouseNumber String?
  zipOrCity           String?
  country             String?
  phone               String?
  gender              GENDER?
  birthDate           DateTime?
  nationality         String?
  maritalStatus       String

  // occupation
  entryDate          DateTime?
  groupOfPeople      String?
  jobTitle           String?
  activationCode     String?
  graduation         String?
  vocationalTraining String?
  AUG                String?
  contractForm       String?
  employmentStatus   String?
  multipleEmployment String?
  weeklyWorkHours    Int?
  dailyWorkHours     Int?

  // taxes
  typeOfEmployment     String?
  identificationNumber String?

  // social insurance
  healthOrLongTermInsurance String?
  healthInsurance           String?
  parenthoodInPrimary       String?
  pensionInsurance          String?
  unemploymentInsurance     String?
  socialSecurityNumber      String?

  // fee
  typeOfPayment String?
  hourWage      Float?
  IBAN          String?
  BIC           String?

  extraInfo                     String? @db.Text
  workingPapersUrls             Json    @default("[]")
  approvalForInclusionInPayroll Boolean @default(false)
  roleId                        Int
  branchId                      Int
  teamId                        Int?

  leadingTeam      Team?        @relation("team_leader")
  role             EmployeeRole @relation(fields: [roleId], references: [id])
  branch           Branch       @relation(fields: [branchId], references: [id])
  mangerInBranches Branch[]     @relation("branch_manager")
  team             Team?        @relation("team_members", fields: [teamId], references: [id])

  // TODO review
  managedDepartments Department[]
  departments        Department[] @relation("department_employees")

  @@id([id])
}

model EmployeeRole {
  id         Int    @id @default(autoincrement())
  name       String @unique
  priviliges Json   @default("{}")

  employees Employee[]
}

model Team {
  id   Int    @id @default(autoincrement())
  name String

  teamLeader   Employee? @relation("team_leader", fields: [teamLeaderId], references: [id])
  teamLeaderId Int?      @unique

  employees Employee[] @relation("team_members")

  clients Client[]

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  @@map("teams")
}

model Client {
  id      Int
  account Acccount @relation(fields: [id], references: [id])

  anrede                   String?
  title                    String?
  benutzername             String
  name                     String
  vomame                   String?
  kurzbezeichnung          String?
  bemerkung                String?
  strasseHausnrZusatz      String?
  adresserganzung          String?
  postleitzahlOrt          String
  landLaenderkuerzel       String?
  bemerkungAddress         String?
  telefonFestnetz          String?
  telefonMobil             String?
  fax                      String?
  gender                   String?
  birthName                String?
  gabatiot                 String?
  gebunsatum               String?
  placeOfDeath             String?
  diedOn                   DateTime?
  retion                   String?
  federalState             String?
  maritalStatus            String?
  sinceThen                DateTime?
  propertyRegime           String?
  unlimitedTaxLiability    Boolean?
  taxIdentificationNumber  String?
  employer                 String?
  pensionInsuranceNumber   String?
  pensionInsuranceProvider String?
  predisposition           String?
  iban                     String?
  customerNumber           String?
  bankCodeName             String?
  taxNumber                String?
  magpieTaxNumber          String?
  powerOfDelivery          String?
  validFrom                DateTime?
  validUntil               DateTime?
  commentTaxNumber         String?
  officialNumberName       String?
  designationTaxOffice     String?
  commentTaxOffice         String?
  taxAccount               String?
  branchId                 Int
  teamId                   Int?

  branch Branch @relation(fields: [branchId], references: [id])

  employeeDailyReports EmployeeDailyReport[]

  team Team? @relation(fields: [teamId], references: [id])

  services ClientService[]

  files File[]

  @@id([id])
  @@map("clients")
}

model ClientService {
  id Int @id @default(autoincrement())

  sesrvice  Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  isCompleted Boolean @default(false)
}

model EmployeeDailyReport {
  id        Int      @id @default(autoincrement())
  sign      String
  month     String
  beginning DateTime
  break     DateTime
  end       DateTime
  remarks   String?
  files     File[]

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?
}

model Email {
  id        Int      @id @default(autoincrement())
  subject   String
  content   String?
  createdAt DateTime @default(now())

  sender   Acccount @relation("user_sended_emails", fields: [senderId], references: [id])
  senderId Int

  receivers Acccount[] @relation("user_received_emails")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  files File[]

  parentEmail   Email? @relation("reply_to_email", fields: [parentEmailId], references: [id])
  parentEmailId Int?   @unique

  childEmail Email? @relation("reply_to_email")

  @@map("emails")
}

model WriteableDocument {
  id        Int      @id @default(autoincrement())
  name      String
  text      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?        @unique
}

model Category {
  id               Int     @id @default(autoincrement())
  clientVisibility Boolean @default(false)

  files File[]

  folders Folder[]

  emails Email[]

  @@map("categories")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentFolder   Folder? @relation("child_folders", fields: [parentFolderId], references: [id])
  parentFolderId Int?

  folders Folder[] @relation("child_folders")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  files File[]

  @@map("folders")
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Acccount? @relation(fields: [userId], references: [id])
  userId Int?

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId Int?

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  email   Email? @relation(fields: [emailId], references: [id])
  emailId Int?

  employeeDailyReport   EmployeeDailyReport? @relation(fields: [employeeDailyReportId], references: [id])
  employeeDailyReportId Int?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?

  @@map("files")
}

model Notification {
  id      Int     @id @default(autoincrement())
  title   String
  content String?

  usre   Acccount @relation(fields: [userId], references: [id])
  userId Int

  @@map("notifications")
}

model ContactUsMessages {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  email       String
  title       String
  description String
  isReaded    Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("contact_us_messages")
}

model Department {
  id   Int    @id @default(autoincrement())
  name String

  employees Employee[] @relation("department_employees")

  manager   Employee? @relation(fields: [managerId], references: [id])
  managerId Int?

  writeableDocument WriteableDocument?

  @@map("departments")
}

model Task {
  id Int @id @default(autoincrement())
  // TODO i don't know how to handle this
}

model CallsHistory {
  id Int @id @default(autoincrement())
  // TODO
}

model Invoice {
  id Int @id @default(autoincrement())
  // TODO
}

// enums
enum ACCOUNT_STATUS {
  active
  archive
}

enum GENDER {
  male
  female
}
