generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Service {
  id            Int     @id @default(autoincrement())
  name          String
  description   String?
  repeatedEvery Int     @default(0)

  tasks   Task[]
  clients Client[]
  emails  Email[]
  files   File[]

  @@map("services")
}

model Branch {
  id       Int     @id @default(autoincrement())
  name     String
  location String?

  managerId Int?      @unique
  manger    Employee? @relation("branch_manager", fields: [managerId], references: [id])

  employees Employee[]

  teams Team[]

  clients Client[]

  @@map("branches")
}

model Account {
  id              Int            @id @default(autoincrement())
  email           String         @unique @map("userNameOrEmail")
  hashedPassword  String
  status          ACCOUNT_STATUS @default(active)
  isOnline        Boolean        @default(false)
  lastLoginAt     DateTime?
  logoutAt        DateTime?
  profileImageUrl String?

  admin    Admin?
  employee Employee?
  client   Client?

  sendedEmails   Email[]        @relation("user_sended_emails")
  receivedEmails Email[]        @relation("user_received_emails")
  uploadedFiles  File[]
  notifications  Notification[]

  meetings Meeting[]

  @@map("accounts")
}

model Admin {
  id              Int
  name            String
  profileImageUrl String?
  account         Account @relation(fields: [id], references: [id])

  @@id([id])
  @@map("admins")
}

model Employee {
  id      Int
  account Account @relation(fields: [id], references: [id])

  // personal details
  personalNumber String?
  salutation     String?
  title          String?
  firstName      String?
  lastName       String? // 3 inputs
  street         String?
  houseNumber    String?   @map("housNumber")
  city           String?
  postalCode     String?   @map("zipCode")
  country        String?
  phone          String?
  gender         GENDER?
  birthDate      DateTime?
  nationality    String?
  username       String?
  maritalStatus  String

  // occupation
  entryDate          DateTime?
  groupOfPeople      String?
  jobTitle           String?
  jobCode            String?   @map("activationCode")
  graduation         String?
  vocationalTraining String?
  AUG                String?
  contractForm       String?
  employmentStatus   String?
  multipleEmployment String?
  weeklyWorkHours    Int?
  dailyWorkHours     Int?

  // taxes
  typeOfEmployment        String?
  taxIdentificationNumber String? @map("identificationNumber")

  // social insurance
  healthOrLongTermInsurance String?
  healthInsurance           String?
  parenthoodInPrimary       String?
  pensionInsurance          String?
  unemploymentInsurance     String?
  socialSecurityNumber      String?

  // fee
  typeOfPayment String?
  hourWage      Float?
  IBAN          String?
  BIC           String?

  extraInfo                     String? @db.Text
  approvalForInclusionInPayroll Boolean @default(false)

  roleId   Int
  branchId Int
  teamId   Int?

  workingPapers File[]

  leadingTeam   Team?                 @relation("team_leader")
  role          EmployeeRole          @relation(fields: [roleId], references: [id])
  branch        Branch                @relation(fields: [branchId], references: [id], onDelete: Cascade)
  managedBranch Branch?               @relation("branch_manager")
  team          Team?                 @relation("team_members", fields: [teamId], references: [id])
  dailyReports  EmployeeDailyReport[]

  tasks       Task[]
  Appointment Appointment[]

  @@id([id])
}

model EmployeeRole {
  id         Int    @id @default(autoincrement())
  name       String @unique
  priviliges Json   @default("{}")

  employees Employee[]
}

model Team {
  id   Int     @id @default(autoincrement())
  name String?

  teamLeader   Employee? @relation("team_leader", fields: [teamLeaderId], references: [id])
  teamLeaderId Int?      @unique

  employees Employee[] @relation("team_members")

  clients Client[]

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  @@map("teams")
}

model Client {
  id      Int
  account Account @relation(fields: [id], references: [id])

  salutation   String? @map("anrede")
  title        String?
  username     String? @map("benutzername")
  name         String?
  companyName  String? @map("vomame")
  abbreviation String? @map("shortName")
  comment      String? @map("bemerkung")

  address1       String? @map("strasseHausnrZusatz")
  address2       String? @map("adresserganzung")
  zipCodeAndCity String? @map("postleitzahlOrt")
  countryCode    String? @map("landLaenderkuerzel")
  addressComment String?

  phoneLandline String? @map("telefonFestnetz")
  phoneMobile   String? @map("telefonMobil")
  fax           String?

  gender                     String?
  maidenName                 String?
  dateOfBirth                DateTime?
  placeOfBirth               String?
  placeOfDeath               String?
  dateOfDeath                DateTime?
  religion                   String?
  federalState               String?
  maritalStatus              String?
  since                      DateTime?
  maritalPropertyRegime      String?
  unlimitedTaxLiability      Boolean?
  taxation                   String?
  taxIdentificationNumber    String?
  profession                 String?
  employer                   String?
  socialSecurityNumber       String?
  socialSecurityOrganization String?

  IBAN               String? @map("iban")
  bankCustomerNumber String?
  bankCode           String?

  taxNumber            String?
  elsterTaxNumber      String?
  deliveryAuthority    String?
  validFrom            DateTime?
  validUntil           DateTime?
  taxNumberComment     String?
  officialNumberName   String?
  taxOfficeDesignation String?
  taxOfficeComment     String?

  branchId Int
  teamId   Int?

  branch Branch @relation(fields: [branchId], references: [id])

  employeeDailyReports EmployeeDailyReport[]

  team Team? @relation(fields: [teamId], references: [id])

  tasks Task[]

  files       File[]
  invoices    Invoice[]
  services    Service[]
  Appointment Appointment[]

  review Review[]

  @@id([id])
  @@map("clients")
}

model Task {
  id     Int  @id @default(autoincrement())
  months Json @default("[]")

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId Int

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees Employee[]

  employeeDailyReports EmployeeDailyReport[]

  @@map("clients_services")
}

model EmployeeDailyReport {
  id      Int      @id @default(autoincrement())
  sign    String
  date    DateTime
  start   String
  pause   String
  end     String
  remarks String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  task   Task? @relation(fields: [taskId], references: [id])
  taskId Int?

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  createdAt DateTime @default(now())

  @@map("employees_daily_reports")
}

model Email {
  id        Int      @id @default(autoincrement())
  subject   String
  content   String?  @db.Text
  createdAt DateTime @default(now())
  isReaded    Boolean  @default(false)

  sender   Account @relation("user_sended_emails", fields: [senderId], references: [id])
  senderId Int

  receivers Account[] @relation("user_received_emails")

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?

  attachments File[]

  parentEmail   Email? @relation("reply_to_email", fields: [parentEmailId], references: [id])
  parentEmailId Int?

  childEmails Email[] @relation("reply_to_email")

  @@map("emails")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentFolder   Folder? @relation("child_folders", fields: [parentFolderId], references: [id])
  parentFolderId Int?

  folders Folder[] @relation("child_folders")

  files File[]

  @@map("folders")
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Account? @relation(fields: [userId], references: [id])
  userId Int?

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId Int?

  email   Email? @relation(fields: [emailId], references: [id])
  emailId Int?

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?

  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?

  @@map("files")
}

model Notification {
  id      Int     @id @default(autoincrement())
  title   String
  content String?

  usre   Account @relation(fields: [userId], references: [id])
  userId Int

  @@map("notifications")
}

model ContactUsMessages {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  email       String
  title       String
  description String
  isReaded    Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("contact_us_messages")
}

model Invoice {
  id              Int    @id @default(autoincrement())
  calculationType String

  totalAmount      Float // Summe (Total)
  vatAmount        Float // Umsatzsteuer (VAT Amount)
  totalGrossAmount Float // Summe (brutto) (Total including VAT)
  remainingAmount  Float // Verbleibender Rechnungsbetrag (Remaining Invoice Amount)
  remainingVat     Float // Verbleibende Umsatzsteuer (Remaining VAT)
  paymentDueDate   DateTime // Zahlung erbeten bis sp√§testens (Payment due by)

  createdAt DateTime      @default(now())
  items     InvoiceItem[]

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  @@map("invoices")
}

model InvoiceItem {
  id              Int    @id @default(autoincrement())
  issue           String // Angelegenheit (Issue/Subject)
  periodTable     String // Zeitraum Tabelle (Period Table)
  valueTimeNumber String // Wert/Zeit/Anzahl (Value/Time/Quantity)
  rate            Float // Satz (Rate)
  amount          Float // Betrag (Amount)

  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId Int

  @@map("invoice_items")
}

model Appointment {
  id      Int    @id @default(autoincrement())
  subject String

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  approvedByClient   Boolean @default(false)
  approvedByEmployee Boolean @default(false)

  date    DateTime
  altDate DateTime?

  meeting   Meeting? @relation(fields: [meetingId], references: [id])
  meetingId Int?     @unique

  createdAt DateTime @default(now())
}

model Meeting {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  timestamp DateTime
  createdAt DateTime @default(now())

  accounts    Account[]
  appointment Appointment?

  @@map("meetings")
}

model Review {
  id      Int     @id @default(autoincrement())
  title   String?
  content String? @db.Text
  rate    Int

  client   Client @relation(fields: [clientId], references: [id])
  clientId Int    @unique

  @@map("clients_reviews")
}

// enums
enum ACCOUNT_STATUS {
  active
  archive
}

enum GENDER {
  male
  female
}
